{"version":3,"sources":["images/wi-wind-deg2.svg","images/sunny.svg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","state","value","temp","country","countryState","name","pressure","sunrise","sunset","wind","weatherCode","weatherIcon","humidity","clouds","description","err","changeValue","e","setState","target","changeCountry","execute","preventDefault","console","log","fetch","then","resp","json","main","sys","speed","windDirection","deg","weather","id","icon","all","catch","errorName","this","className","onSubmit","type","placeholder","onChange","Component","Header","DisplayLeft","props","sunriseTime","Date","toLocaleTimeString","sunsetTime","src","style","transform","windElement","sun","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f61c5cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wi-wind-deg2.5027b830.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.6da4dd1d.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport \"./Style.scss\";\nimport windElement from \"./images/wi-wind-deg2.svg\";\nimport sun from \"./images/sunny.svg\";\n\nclass App extends Component {\n    state = {\n        value: '',\n        temp: false,\n        country: '',\n        countryState: '',\n        name: '',\n        pressure: '',\n        sunrise: '',\n        sunset: '',\n        wind: '',\n        weatherCode: '',\n        weatherIcon: '',\n        humidity: '',\n        clouds: '',\n        description: '',\n        err: false\n    };\n\n    changeValue = (e) => this.setState({value: e.target.value});\n    changeCountry =(e) => this.setState({country: e.target.value});\n    execute = (e) => {\n        e.preventDefault();\n        console.log('hej');\n        if(this.state.value && this.state.country) {\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${this.state.value},${this.state.country}&appid=da3f20019c7a316cac57d973be18e3ab&units=metric&lang=pl`)\n        // `api.openweathermap.org/data/2.5/weather?q=${this.state.value},${this.state.country}&appid=da3f20019c7a316cac57d973be18e3ab&units=metric&lang=pl`\n            .then(resp => resp.json())\n            .then(resp => {\n                this.setState({\n                    temp: resp.main.temp,\n                    name: resp.name,\n                    countryState: resp.sys.country,\n                    pressure: resp.main.pressure,\n                    sunrise: resp.sys.sunrise,\n                    sunset: resp.sys.sunset,\n                    wind: resp.wind.speed,\n                    windDirection: resp.wind.deg,\n                    weatherCode: resp.weather[0].id,\n                    weatherIcon: resp.weather[0].icon,\n                    description: resp.weather[0].description,\n                    humidity: resp.main.humidity,\n                    clouds: resp.clouds.all,\n                    err: false\n                });\n            })\n            .catch(err => {\n                // console.log(\"bład\"),\n                this.setState({err: true})\n            })\n        } else {\n            this.setState({err: true});\n        }\n    };\n\n    render() {\n        let errorName;\n        if(this.state.err) {\n            errorName = <div>\n                <h4 id='throwError'>Niepoprawna nazwa miasta lub państwa</h4>\n                </div>\n        }\n        return <>\n        <div className='former'>\n            <div className='maxContainer'>\n                <Header />\n                {errorName}\n                <div className='formContainer'>\n                    <form onSubmit={this.execute}>\n                        <input type=\"text\" placeholder='Miasto' value={this.state.value} onChange={this.changeValue} />\n                        <input type=\"text\" placeholder=\"Kod państwa\" value={this.state.country} onChange={this.changeCountry} />\n                        <button className=\"btn btn1\" type='submit'>Szukaj</button>\n                    </form>\n                </div>\n                <div className='DisplayContainer'>\n                    <DisplayLeft\n                        temp={this.state.temp}\n                        name={this.state.name}\n                        pressure={this.state.pressure}\n                        sunrise={this.state.sunrise}\n                        sunset={this.state.sunset}\n                        wind={this.state.wind}\n                        weatherIcon={this.state.weatherIcon}\n                        humidity={this.state.humidity}\n                        windDirection={this.state.windDirection}\n                        clouds={this.state.clouds}\n                        description={this.state.description}\n                        country={this.state.countryState}\n                    />\n                </div>\n            </div>\n        </div>\n        </>\n    }\n}\n\nclass Header extends Component {\n    render() {\n        return <div className='headerImg'>\n            <h1 className='text'>Weather Api</h1>\n        </div>\n    }\n}\n\nclass DisplayLeft extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const sunriseTime = new Date(this.props.sunrise * 1000).toLocaleTimeString();\n        const sunsetTime = new Date(this.props.sunset * 1000).toLocaleTimeString();\n        if (!this.props.temp) {\n            return <div className='elementContainer'>\n                <div id='dane'>\n                        <div className='element'>\n                            <img id='sunAnime' src={sun} />\n                        </div>\n                 </div>\n            </div>\n        } else {\n            return <div className='elementContainer'>\n                        <div className='leftElement'>\n                        <div className='Image'>\n                            <img className='weatherImg' src={`http://openweathermap.org/img/wn/${this.props.weatherIcon}@2x.png`} />\n                         </div>\n                            <div className='cityName'>\n                            <h1>{this.props.name}</h1>\n                            <h2>{this.props.country}</h2>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Temperatura: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.temp} &#176;C</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Pogoda: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.description}</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Ciśnienie: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.pressure} hPa</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Wiatr: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.wind} m/s</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <img id=\"weatherIcon\" style={{transform: `rotate(${this.props.windDirection}deg)`}} src={windElement}/>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Zachmurzenie: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.clouds}%</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Wilgotność: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{this.props.humidity} %</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Wschód słońca: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{sunriseTime}</h1>\n                                </div>\n                            </div>\n                            <div className='infoElement'>\n                                <div className='insideElement'>\n                                    <h1>Zachód słońca: </h1>\n                                </div>\n                                <div className='insideElement'>\n                                    <h1>{sunsetTime}</h1>\n                                </div>\n                            </div>\n                        </div>\n                     </div>\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}